{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"COMP 4768: Software Development for Mobile Devices Instructor: Pranjal Patra Office: EN2008 Email: pp7002@mun.ca Office Hours: Fridays 2PM to 4PM or by request (virtual meetings) Evaluation Assignments (4 - 5): 50% Project: 50% Representative Course Outline (Tentative) Module 0: Intro, Setup, Hello World 0.0: Course Introduction 0.1: Setup and creating a flutter project 0.2: Hello World in flutter Module 1: Flutter 101: 1.0: First Flutter app 1.1: What is State? 1.2: Managing State in Flutter 1.3: Common Widgets 1.4: Routing 1.5: Layouts Module 2: Dart: 2.1 Introduction to Dart 2.2 Syntax Basics 2.3 Types 2.4 Functions 2.5 Loops and Branches 2.6 Error Handling 2.7 OOP 2.8 Concurrency 2.9 Null Safety Module 3: More Flutter Topics: 3.0 Animation 3.1 Design and Theming 3.2 Navigation and Routing 3.3 Persistence 3.4 Miscellaneous Topics in Flutter Module 4: Firebase 4.0 Firebase Authentication 4.1 Firebase CRUD Module 5: Capstone Project Course Description focuses on the design and implementation of software in a mobile networking environment. The primary topics to be covered in this course include software engineering, network computing, graphics programming, and human-computer interaction for mobile devices. A modern mobile device with advanced networking and graphic features, including multi-touch interaction and motion sensors will be used as the primary platform for development in this course. Prerequisites COMP 2008 or the former COMP 2760 COMP 2006 or the former COMP 3715 COMP 2005 or the former COMP 3716 Additional Policies: Mode of Delivery: In-person Course Format: Lecture-based Method of Instructional Continuity: In the case of a class disruption or cancellation, and in the case of revisions to evaluation methods, the instructor or the Head of the department will notify all students registered in the course via the course shell in Brightspace. Any necessary revisions to the evaluation methods will be made in consultation with the students registered in this course. If a student demonstrates that they would be disadvantaged by the change, then, as per 6.7.4 of the University Calendar, accommodations will be made. Memorial University of Newfoundland is committed to fostering equitable and accessible learning environments for all students. Accommodations for students with disabilities are provided in accordance with Accommodations for Students with Disabilities Policy (www.mun.ca/policy/site/policy.php?id=239) and its related procedures. Students who feel that they may require formal academic accommodations to address barriers or challenges they are experiencing related to their learning are encouraged to contact Accessibility Services (the Blundon Centre) at the earliest opportunity to ensure any required academic accommodations are provided in a timely manner. You can contact Accessibility Services (Blundon Centre) by emailing blundon@mun.ca. Students are expected to adhere to those principles which constitute proper academic conduct. A student has the responsibility to know which actions, as described under Academic Offences in the University Regulations, could be construed as dishonest or improper. Students found guilty of an academic offence may be subject to a number of penalties commensurate with the offence including reprimand, reduction of grade, probation, suspension or expulsion from the University. For more information regarding this policy, students should refer to the University Regulations for Academic Misconduct (Section 6.12) in the University Calendar What is academic integrity?","title":"COMP 4768: Software Development for Mobile Devices"},{"location":"#comp-4768-software-development-for-mobile-devices","text":"","title":"COMP 4768: Software Development for Mobile Devices"},{"location":"#instructor-pranjal-patra","text":"Office: EN2008 Email: pp7002@mun.ca Office Hours: Fridays 2PM to 4PM or by request (virtual meetings)","title":"Instructor: Pranjal Patra"},{"location":"#evaluation","text":"Assignments (4 - 5): 50% Project: 50%","title":"Evaluation"},{"location":"#representative-course-outline-tentative","text":"Module 0: Intro, Setup, Hello World 0.0: Course Introduction 0.1: Setup and creating a flutter project 0.2: Hello World in flutter Module 1: Flutter 101: 1.0: First Flutter app 1.1: What is State? 1.2: Managing State in Flutter 1.3: Common Widgets 1.4: Routing 1.5: Layouts Module 2: Dart: 2.1 Introduction to Dart 2.2 Syntax Basics 2.3 Types 2.4 Functions 2.5 Loops and Branches 2.6 Error Handling 2.7 OOP 2.8 Concurrency 2.9 Null Safety Module 3: More Flutter Topics: 3.0 Animation 3.1 Design and Theming 3.2 Navigation and Routing 3.3 Persistence 3.4 Miscellaneous Topics in Flutter Module 4: Firebase 4.0 Firebase Authentication 4.1 Firebase CRUD Module 5: Capstone Project","title":"Representative Course Outline (Tentative)"},{"location":"#course-description","text":"focuses on the design and implementation of software in a mobile networking environment. The primary topics to be covered in this course include software engineering, network computing, graphics programming, and human-computer interaction for mobile devices. A modern mobile device with advanced networking and graphic features, including multi-touch interaction and motion sensors will be used as the primary platform for development in this course.","title":"Course Description"},{"location":"#prerequisites","text":"COMP 2008 or the former COMP 2760 COMP 2006 or the former COMP 3715 COMP 2005 or the former COMP 3716","title":"Prerequisites"},{"location":"#additional-policies","text":"Mode of Delivery: In-person Course Format: Lecture-based Method of Instructional Continuity: In the case of a class disruption or cancellation, and in the case of revisions to evaluation methods, the instructor or the Head of the department will notify all students registered in the course via the course shell in Brightspace. Any necessary revisions to the evaluation methods will be made in consultation with the students registered in this course. If a student demonstrates that they would be disadvantaged by the change, then, as per 6.7.4 of the University Calendar, accommodations will be made. Memorial University of Newfoundland is committed to fostering equitable and accessible learning environments for all students. Accommodations for students with disabilities are provided in accordance with Accommodations for Students with Disabilities Policy (www.mun.ca/policy/site/policy.php?id=239) and its related procedures. Students who feel that they may require formal academic accommodations to address barriers or challenges they are experiencing related to their learning are encouraged to contact Accessibility Services (the Blundon Centre) at the earliest opportunity to ensure any required academic accommodations are provided in a timely manner. You can contact Accessibility Services (Blundon Centre) by emailing blundon@mun.ca. Students are expected to adhere to those principles which constitute proper academic conduct. A student has the responsibility to know which actions, as described under Academic Offences in the University Regulations, could be construed as dishonest or improper. Students found guilty of an academic offence may be subject to a number of penalties commensurate with the offence including reprimand, reduction of grade, probation, suspension or expulsion from the University. For more information regarding this policy, students should refer to the University Regulations for Academic Misconduct (Section 6.12) in the University Calendar What is academic integrity?","title":"Additional Policies:"},{"location":"0.0_course_intro/","text":"","title":"0.0 Course Introduction"},{"location":"0.1_getting_started/","text":"Get Started with Flutter Install Flutter SDK This part guides you through the installation process of Flutter on your computer. You'll download the Flutter SDK and update the $PATH variable to include the flutter/bin directory. Follow the guide created for your OS. Install an editor In this section, you'll learn how to set up a code editor for Flutter development. Popular choices include VS Code and Android Studio. I will be using Android Studio in class and if like to follow along, I suggest the same IDE. Run flutter doctor You should get something like this after you install everything. Output will look different based if you are on Windows or Linux, but you should have atleast one simulator working (andoroid or iOS) and also Chrome should work Test Drive This part helps you get hands-on experience by walking you through creating, running, and modifying a simple Flutter app. Create the app Here, you'll create a new Flutter project using the command line or your chosen editor's interface. Run the app This step shows you how to run your Flutter app on a physical device or an emulator. Hot reload Learn about Flutter's hot reload feature, which allows you to see changes instantly without rebuilding the entire app. Run on multiple platforms Run your app in a variety of platforms such as: iOS simulator Android simulator Windows MacOS Linux Chrome/Edge You can also try running on a physical device","title":"0.1 Getting Started"},{"location":"0.1_getting_started/#get-started-with-flutter","text":"","title":"Get Started with Flutter"},{"location":"0.1_getting_started/#install-flutter-sdk","text":"This part guides you through the installation process of Flutter on your computer. You'll download the Flutter SDK and update the $PATH variable to include the flutter/bin directory. Follow the guide created for your OS.","title":"Install Flutter SDK"},{"location":"0.1_getting_started/#install-an-editor","text":"In this section, you'll learn how to set up a code editor for Flutter development. Popular choices include VS Code and Android Studio. I will be using Android Studio in class and if like to follow along, I suggest the same IDE.","title":"Install an editor"},{"location":"0.1_getting_started/#run-flutter-doctor","text":"You should get something like this after you install everything. Output will look different based if you are on Windows or Linux, but you should have atleast one simulator working (andoroid or iOS) and also Chrome should work","title":"Run flutter doctor"},{"location":"0.1_getting_started/#test-drive","text":"This part helps you get hands-on experience by walking you through creating, running, and modifying a simple Flutter app.","title":"Test Drive"},{"location":"0.1_getting_started/#create-the-app","text":"Here, you'll create a new Flutter project using the command line or your chosen editor's interface.","title":"Create the app"},{"location":"0.1_getting_started/#run-the-app","text":"This step shows you how to run your Flutter app on a physical device or an emulator.","title":"Run the app"},{"location":"0.1_getting_started/#hot-reload","text":"Learn about Flutter's hot reload feature, which allows you to see changes instantly without rebuilding the entire app.","title":"Hot reload"},{"location":"0.1_getting_started/#run-on-multiple-platforms","text":"Run your app in a variety of platforms such as: iOS simulator Android simulator Windows MacOS Linux Chrome/Edge You can also try running on a physical device","title":"Run on multiple platforms"},{"location":"0.2_hello_world/","text":"Hello, World! 1. Create a new empty project called hello world Use flutter create --empty hello_world to create a new empty project. 2. Open project in an IDE Open the main.dart file inside the lib directory. This is the starting point of any Flutter app. You should see the following code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import 'package:flutter/material.dart' ; void main () { runApp ( const MainApp ()); } class MainApp extends StatelessWidget { const MainApp ({ super . key }); @override Widget build ( BuildContext context ) { return const MaterialApp ( home: Scaffold ( body: Center ( child: Text ( 'Hello World!' ), ), ), ); } } This Flutter app creates a Material Design application with a simple layout ( Scaffold ) that has a centered text widget displaying \"Hello World!\". Let's break down each part of the code: Import Statement 1 import 'package:flutter/material.dart' ; This line imports the Material Design package, which is a visual design language that is standard on mobile and the web. Flutter offers a rich set of pre-designed widgets that follow Material Design guidelines. Main Function 1 2 3 void main () { runApp ( const MainApp ()); } void main() is the entry point of the Flutter app. When the app launches, this function is the first to be executed. runApp() is a Flutter function that takes a widget and makes it the root of the widget tree. In this case, MainApp() is the root widget. Stateless Widget 1 2 3 4 5 6 7 8 class MainApp extends StatelessWidget { const MainApp ({ super . key }); @override Widget build ( BuildContext context ) { // ... } } class MainApp extends StatelessWidget : Here, we define a new widget called MainApp that inherits from StatelessWidget . A StatelessWidget is a widget that describes part of the user interface which can depend on the configuration but does not change over time. You will learn more about State in the upcoming lectures. const MainApp({super.key}); : This is the constructor for the MainApp widget. It allows for a key to be passed to the widget, which is useful for identifying widgets in the widget tree. @override : This indicates that we're overriding a method ( build method) from the parent class ( StatelessWidget ). Build Method 1 2 3 4 5 6 7 8 9 Widget build ( BuildContext context ) { return const MaterialApp ( home: Scaffold ( body: Center ( child: Text ( 'Hello World!' ), ), ), ); } Widget build(BuildContext context) : This method returns a widget tree that Flutter uses to build the UI. It's a required override when you extend StatelessWidget or StatefulWidget . MaterialApp : This is the root widget for Material Design apps. It provides a number of useful features like navigation, theming, and so on. Scaffold : This is a basic layout structure where you can place other widgets. It can have elements like an AppBar , a Drawer , a BottomNavigationBar , etc. Center : This widget centers its child within itself. Text('Hello World!') : This is a simple text widget that displays \"Hello World!\". Update analysis_options.yaml Update the Analysis Options file so that the flutter linting is less aggressive Update main.dart Change font size 1 2 3 4 child: Text ( 'Hello World!' , style: TextStyle ( fontSize: 48 ), ), By adding the style attribute, you can change the fontSize among many other things. Add an appBar to the Scaffold Add the appBar attribute to the Scaffold which creates a bar at the top of the screen. See more 1 2 3 4 5 6 home: Scaffold ( appBar: AppBar ( title: Text ( 'Hello, World!' ), ), body: ... ) Change colours Adding lines 14 and 16 will change the colours of your app. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import 'package:flutter/material.dart' ; void main () { runApp ( const MainApp ()); } class MainApp extends StatelessWidget { const MainApp ({ super . key }); @override Widget build ( BuildContext context ) { return MaterialApp ( home: Scaffold ( backgroundColor: Colors . amberAccent , appBar: AppBar ( backgroundColor: Colors . deepOrange , title: Text ( 'Hello, World!' ), ), body: Center ( child: Text ( 'Welcome to \\n COMP4768' , style: TextStyle ( fontSize: 48 ), ), ), ), ); } }","title":"0.2 Hello World"},{"location":"0.2_hello_world/#hello-world","text":"","title":"Hello, World!"},{"location":"0.2_hello_world/#1-create-a-new-empty-project-called-hello-world","text":"Use flutter create --empty hello_world to create a new empty project.","title":"1. Create a new empty project called hello world"},{"location":"0.2_hello_world/#2-open-project-in-an-ide","text":"Open the main.dart file inside the lib directory. This is the starting point of any Flutter app. You should see the following code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import 'package:flutter/material.dart' ; void main () { runApp ( const MainApp ()); } class MainApp extends StatelessWidget { const MainApp ({ super . key }); @override Widget build ( BuildContext context ) { return const MaterialApp ( home: Scaffold ( body: Center ( child: Text ( 'Hello World!' ), ), ), ); } } This Flutter app creates a Material Design application with a simple layout ( Scaffold ) that has a centered text widget displaying \"Hello World!\". Let's break down each part of the code:","title":"2. Open project in an IDE"},{"location":"0.2_hello_world/#import-statement","text":"1 import 'package:flutter/material.dart' ; This line imports the Material Design package, which is a visual design language that is standard on mobile and the web. Flutter offers a rich set of pre-designed widgets that follow Material Design guidelines.","title":"Import Statement"},{"location":"0.2_hello_world/#main-function","text":"1 2 3 void main () { runApp ( const MainApp ()); } void main() is the entry point of the Flutter app. When the app launches, this function is the first to be executed. runApp() is a Flutter function that takes a widget and makes it the root of the widget tree. In this case, MainApp() is the root widget.","title":"Main Function"},{"location":"0.2_hello_world/#stateless-widget","text":"1 2 3 4 5 6 7 8 class MainApp extends StatelessWidget { const MainApp ({ super . key }); @override Widget build ( BuildContext context ) { // ... } } class MainApp extends StatelessWidget : Here, we define a new widget called MainApp that inherits from StatelessWidget . A StatelessWidget is a widget that describes part of the user interface which can depend on the configuration but does not change over time. You will learn more about State in the upcoming lectures. const MainApp({super.key}); : This is the constructor for the MainApp widget. It allows for a key to be passed to the widget, which is useful for identifying widgets in the widget tree. @override : This indicates that we're overriding a method ( build method) from the parent class ( StatelessWidget ).","title":"Stateless Widget"},{"location":"0.2_hello_world/#build-method","text":"1 2 3 4 5 6 7 8 9 Widget build ( BuildContext context ) { return const MaterialApp ( home: Scaffold ( body: Center ( child: Text ( 'Hello World!' ), ), ), ); } Widget build(BuildContext context) : This method returns a widget tree that Flutter uses to build the UI. It's a required override when you extend StatelessWidget or StatefulWidget . MaterialApp : This is the root widget for Material Design apps. It provides a number of useful features like navigation, theming, and so on. Scaffold : This is a basic layout structure where you can place other widgets. It can have elements like an AppBar , a Drawer , a BottomNavigationBar , etc. Center : This widget centers its child within itself. Text('Hello World!') : This is a simple text widget that displays \"Hello World!\".","title":"Build Method"},{"location":"0.2_hello_world/#update-analysis_optionsyaml","text":"Update the Analysis Options file so that the flutter linting is less aggressive","title":"Update analysis_options.yaml"},{"location":"0.2_hello_world/#update-maindart","text":"","title":"Update main.dart"},{"location":"0.2_hello_world/#change-font-size","text":"1 2 3 4 child: Text ( 'Hello World!' , style: TextStyle ( fontSize: 48 ), ), By adding the style attribute, you can change the fontSize among many other things.","title":"Change font size"},{"location":"0.2_hello_world/#add-an-appbar-to-the-scaffold","text":"Add the appBar attribute to the Scaffold which creates a bar at the top of the screen. See more 1 2 3 4 5 6 home: Scaffold ( appBar: AppBar ( title: Text ( 'Hello, World!' ), ), body: ... )","title":"Add an appBar to the Scaffold"},{"location":"0.2_hello_world/#change-colours","text":"Adding lines 14 and 16 will change the colours of your app. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import 'package:flutter/material.dart' ; void main () { runApp ( const MainApp ()); } class MainApp extends StatelessWidget { const MainApp ({ super . key }); @override Widget build ( BuildContext context ) { return MaterialApp ( home: Scaffold ( backgroundColor: Colors . amberAccent , appBar: AppBar ( backgroundColor: Colors . deepOrange , title: Text ( 'Hello, World!' ), ), body: Center ( child: Text ( 'Welcome to \\n COMP4768' , style: TextStyle ( fontSize: 48 ), ), ), ), ); } }","title":"Change colours"},{"location":"1.0_first_app/","text":"How do I make my first Flutter app?","title":"How do I make my first Flutter app?"},{"location":"1.0_first_app/#how-do-i-make-my-first-flutter-app","text":"","title":"How do I make my first Flutter app?"},{"location":"1.1_some_topic/","text":"","title":"1.1 some topic"},{"location":"1.2_managing_state/","text":"Managing State in FLutter Note : We are not following the code in the video as it uses RiverPod which is a bit more advanced. See this for comparison of various state. Instead we will use a more popular and user-friendly packaged called provider . Step 0: Add the provider package Run flutter pub add provider in Android Studio's terminal to install the provider package. More details here Step 1: Create a separate class to store the _taskCompletedCount In this step, we are creating a class named TaskCounterModel to keep track of the number of tasks completed. This class uses Flutter's ChangeNotifier to update the UI whenever the task count changes. 1 2 3 4 5 6 7 8 9 10 11 12 13 class TaskCounterModel extends ChangeNotifier { int _taskCompletedCount = 0 ; int get tasksCompleted => _taskCompletedCount ; void increment () { _taskCompletedCount ++ ; notifyListeners (); } void decrement () { _taskCompletedCount -- ; notifyListeners (); } } Step 2: Wrap the entire App inside a ChangeNotiferProvider In this step, we are wrapping our main app inside a ChangeNotifierProvider . This allows us to make the TaskCounterModel available throughout the app for state management. Convert the following 1 void main () => runApp ( MyApp ()); to 1 2 3 4 5 6 7 8 import 'package:provider/provider.dart' ; void main () => runApp ( ChangeNotifierProvider ( create: ( context ) => TaskCounterModel (), child: MyApp (), ), ); Step 3: Get the checkboxes to update the information Here, we modify the TaskItem widget to use Consumer for listening to changes in TaskCounterModel . When a checkbox is toggled, it will either increment or decrement the task completed count. Replace the top code with the bottom code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class _TaskItemState extends State < TaskItem > { bool ? _value = false ; @override Widget build ( BuildContext context ) { return Row ( children: [ Checkbox ( onChanged: ( newValue ) => setState (() => _value = newValue ), value: _value , ), Text ( widget . label ), ], ); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class _TaskItemState extends State < TaskItem > { bool ? _value = false ; @override Widget build ( BuildContext context ) { return Consumer < TaskCounterModel > ( builder: ( context , value , child ) => Row ( children: [ Checkbox ( onChanged: ( newValue ) => setState (() { _value = newValue ; if ( newValue ! ) { value . increment (); } else { value . decrement (); } }), value: _value , ), Text ( widget . label ), ], ), ); } } Step 4: Get the progressbar( LinearProgressIndicator ) to Consume the information In this final step, we update the Progress widget to consume the task completed count from TaskCounterModel . The LinearProgressIndicator will now reflect the progress based on the number of tasks completed. Replace the top code with the bottom code 1 2 3 4 5 6 7 8 9 10 11 class Progress extends StatelessWidget { @override Widget build ( BuildContext context ) { return Column ( children: [ Text ( 'You are this far away from exploring the whole universe:' ), LinearProgressIndicator ( value: 0.0 ), ], ); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 class Progress extends StatelessWidget { @override Widget build ( BuildContext context ) { return Consumer < TaskCounterModel > ( builder: ( context , value , child ) => Column ( children: [ Text ( 'You are this far away from exploring the whole universe:' ), LinearProgressIndicator ( value: value . tasksCompleted / 5 ), ], ), ); } }","title":"Managing State in FLutter"},{"location":"1.2_managing_state/#managing-state-in-flutter","text":"Note : We are not following the code in the video as it uses RiverPod which is a bit more advanced. See this for comparison of various state. Instead we will use a more popular and user-friendly packaged called provider .","title":"Managing State in FLutter"},{"location":"1.2_managing_state/#step-0-add-the-provider-package","text":"Run flutter pub add provider in Android Studio's terminal to install the provider package. More details here","title":"Step 0: Add the provider package"},{"location":"1.2_managing_state/#step-1-create-a-separate-class-to-store-the-_taskcompletedcount","text":"In this step, we are creating a class named TaskCounterModel to keep track of the number of tasks completed. This class uses Flutter's ChangeNotifier to update the UI whenever the task count changes. 1 2 3 4 5 6 7 8 9 10 11 12 13 class TaskCounterModel extends ChangeNotifier { int _taskCompletedCount = 0 ; int get tasksCompleted => _taskCompletedCount ; void increment () { _taskCompletedCount ++ ; notifyListeners (); } void decrement () { _taskCompletedCount -- ; notifyListeners (); } }","title":"Step 1: Create a separate class to store the _taskCompletedCount"},{"location":"1.2_managing_state/#step-2-wrap-the-entire-app-inside-a-changenotiferprovider","text":"In this step, we are wrapping our main app inside a ChangeNotifierProvider . This allows us to make the TaskCounterModel available throughout the app for state management. Convert the following 1 void main () => runApp ( MyApp ()); to 1 2 3 4 5 6 7 8 import 'package:provider/provider.dart' ; void main () => runApp ( ChangeNotifierProvider ( create: ( context ) => TaskCounterModel (), child: MyApp (), ), );","title":"Step 2: Wrap the entire App inside a ChangeNotiferProvider"},{"location":"1.2_managing_state/#step-3-get-the-checkboxes-to-update-the-information","text":"Here, we modify the TaskItem widget to use Consumer for listening to changes in TaskCounterModel . When a checkbox is toggled, it will either increment or decrement the task completed count. Replace the top code with the bottom code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class _TaskItemState extends State < TaskItem > { bool ? _value = false ; @override Widget build ( BuildContext context ) { return Row ( children: [ Checkbox ( onChanged: ( newValue ) => setState (() => _value = newValue ), value: _value , ), Text ( widget . label ), ], ); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class _TaskItemState extends State < TaskItem > { bool ? _value = false ; @override Widget build ( BuildContext context ) { return Consumer < TaskCounterModel > ( builder: ( context , value , child ) => Row ( children: [ Checkbox ( onChanged: ( newValue ) => setState (() { _value = newValue ; if ( newValue ! ) { value . increment (); } else { value . decrement (); } }), value: _value , ), Text ( widget . label ), ], ), ); } }","title":"Step 3: Get the checkboxes to update the information"},{"location":"1.2_managing_state/#step-4-get-the-progressbarlinearprogressindicator-to-consume-the-information","text":"In this final step, we update the Progress widget to consume the task completed count from TaskCounterModel . The LinearProgressIndicator will now reflect the progress based on the number of tasks completed. Replace the top code with the bottom code 1 2 3 4 5 6 7 8 9 10 11 class Progress extends StatelessWidget { @override Widget build ( BuildContext context ) { return Column ( children: [ Text ( 'You are this far away from exploring the whole universe:' ), LinearProgressIndicator ( value: 0.0 ), ], ); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 class Progress extends StatelessWidget { @override Widget build ( BuildContext context ) { return Consumer < TaskCounterModel > ( builder: ( context , value , child ) => Column ( children: [ Text ( 'You are this far away from exploring the whole universe:' ), LinearProgressIndicator ( value: value . tasksCompleted / 5 ), ], ), ); } }","title":"Step 4: Get the progressbar(LinearProgressIndicator) to Consume the information"},{"location":"1.3_common_widgets/","text":"","title":"1.3 common widgets"},{"location":"1.4_routing/","text":"","title":"1.4 routing"},{"location":"1.5_layouts/","text":"","title":"1.5 layouts"},{"location":"9.1_how_to_git/","text":"Flutter Project with Git and GitHub: A Step-by-Step Guide Prerequisites Make sure you have Flutter and Git installed on your system. Create a GitHub account if you haven't already. Install PyCharm IDE for Flutter development. Step 1: Create a New Flutter Project Open your terminal. Navigate to the directory where you want to create your new Flutter project. Run the following command to create a new Flutter project: 1 flutter create demo_project Step 2: Navigate to the Project Directory Change the directory to the newly created Flutter project: 1 cd demo_project Step 3: Initialize a Git Repository Initialize a new Git repository in your project directory: 1 git init Step 4: Add Files to Git and Make Initial Commit Add all the project files to the Git repository: 1 git add . Make your initial commit: 1 git commit -m \"Initial commit\" Step 5: Link to GitHub Repository Go to GitHub and create a new repository named demo_project . Copy the repository URL. Link your local repository to the GitHub repository: 1 git remote add origin https://github.com/yourusername/demo_project.git Step 6: Rename the Default Branch (Optional) Rename your default branch to main (this is optional and based on your preference): 1 git branch -M main Step 7: Push to GitHub Push your local repository to GitHub: 1 git push -u origin main Step 8: Open Project in PyCharm Open PyCharm. Go to File > Open . Navigate to your demo_project directory and select it. Click Open .","title":"A: How to Git"},{"location":"9.1_how_to_git/#flutter-project-with-git-and-github-a-step-by-step-guide","text":"","title":"Flutter Project with Git and GitHub: A Step-by-Step Guide"},{"location":"9.1_how_to_git/#prerequisites","text":"Make sure you have Flutter and Git installed on your system. Create a GitHub account if you haven't already. Install PyCharm IDE for Flutter development.","title":"Prerequisites"},{"location":"9.1_how_to_git/#step-1-create-a-new-flutter-project","text":"Open your terminal. Navigate to the directory where you want to create your new Flutter project. Run the following command to create a new Flutter project: 1 flutter create demo_project","title":"Step 1: Create a New Flutter Project"},{"location":"9.1_how_to_git/#step-2-navigate-to-the-project-directory","text":"Change the directory to the newly created Flutter project: 1 cd demo_project","title":"Step 2: Navigate to the Project Directory"},{"location":"9.1_how_to_git/#step-3-initialize-a-git-repository","text":"Initialize a new Git repository in your project directory: 1 git init","title":"Step 3: Initialize a Git Repository"},{"location":"9.1_how_to_git/#step-4-add-files-to-git-and-make-initial-commit","text":"Add all the project files to the Git repository: 1 git add . Make your initial commit: 1 git commit -m \"Initial commit\"","title":"Step 4: Add Files to Git and Make Initial Commit"},{"location":"9.1_how_to_git/#step-5-link-to-github-repository","text":"Go to GitHub and create a new repository named demo_project . Copy the repository URL. Link your local repository to the GitHub repository: 1 git remote add origin https://github.com/yourusername/demo_project.git","title":"Step 5: Link to GitHub Repository"},{"location":"9.1_how_to_git/#step-6-rename-the-default-branch-optional","text":"Rename your default branch to main (this is optional and based on your preference): 1 git branch -M main","title":"Step 6: Rename the Default Branch (Optional)"},{"location":"9.1_how_to_git/#step-7-push-to-github","text":"Push your local repository to GitHub: 1 git push -u origin main","title":"Step 7: Push to GitHub"},{"location":"9.1_how_to_git/#step-8-open-project-in-pycharm","text":"Open PyCharm. Go to File > Open . Navigate to your demo_project directory and select it. Click Open .","title":"Step 8: Open Project in PyCharm"},{"location":"9.2_analysis_options.yaml/","text":"Open another configuration file in the project, analysis_options.yaml . Replace its contents with the following: 1 2 3 4 5 6 7 8 9 10 include : package:flutter_lints/flutter.yaml linter : rules : prefer_const_constructors : false prefer_final_fields : false use_key_in_widget_constructors : false prefer_const_literals_to_create_immutables : false prefer_const_constructors_in_immutables : false avoid_print : false This file determines how strict Flutter should be when analyzing your code. Since this is your first foray into Flutter, you're telling the analyzer to take it easy. You can always tune this later. In fact, as you get closer to publishing an actual production app, you will almost certainly want to make the analyzer stricter than this.","title":"B: Modify analysis_options.yaml to make it chill"},{"location":"L1_hello_flutter/","text":"Lecture 1 What is flutter Flutter is an open source framework by Google for building beautiful, natively compiled, multi-platform applications from a single codebase. Multi-Platform Flutter allows you to build apps for mobile, web, desktop, and embedded devices \u2014 all from a single codebase. Popular Flutter is the most popular cross platform application development framework according to the 2022 Stack Overflow developer survey","title":"Lecture 1"},{"location":"L1_hello_flutter/#lecture-1","text":"","title":"Lecture 1"},{"location":"L1_hello_flutter/#what-is-flutter","text":"Flutter is an open source framework by Google for building beautiful, natively compiled, multi-platform applications from a single codebase.","title":"What is flutter"},{"location":"L1_hello_flutter/#multi-platform","text":"Flutter allows you to build apps for mobile, web, desktop, and embedded devices \u2014 all from a single codebase.","title":"Multi-Platform"},{"location":"L1_hello_flutter/#popular","text":"Flutter is the most popular cross platform application development framework according to the 2022 Stack Overflow developer survey","title":"Popular"},{"location":"L2_getting_started/","text":"Plan Lec 2","title":"Plan Lec 2"},{"location":"L2_getting_started/#plan-lec-2","text":"","title":"Plan Lec 2"},{"location":"admin/","text":"COMP 4768: Software Development for Mobile Devices Instructor: Pranjal Patra Office: EN2008 Email: pp7002@mun.ca Office Hours: Fridays 2PM to 4PM or by request (virtual meetings) Evaluation Assignments (4 - 5): 50% Project: 50%","title":"COMP 4768: Software Development for Mobile Devices"},{"location":"admin/#comp-4768-software-development-for-mobile-devices","text":"","title":"COMP 4768: Software Development for Mobile Devices"},{"location":"admin/#instructor-pranjal-patra","text":"Office: EN2008 Email: pp7002@mun.ca Office Hours: Fridays 2PM to 4PM or by request (virtual meetings)","title":"Instructor: Pranjal Patra"},{"location":"admin/#evaluation","text":"Assignments (4 - 5): 50% Project: 50%","title":"Evaluation"}]}